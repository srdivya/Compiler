package cop5556sp17;
import static org.junit.Assert.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp17.AST.ASTNode;
import cop5556sp17.AST.Expression;
import cop5556sp17.AST.Program;
import cop5556sp17.Scanner.Kind;
public class CodeGenTest {

	@Rule
	public ExpectedException thrown = ExpectedException.none();

	static final boolean doPrint = true;
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}
	@Before
	public void initLog(){
	if (devel || grade) PLPRuntimeLog.initLog();
	}

	@After
	public void printLog(){
	System.out.println(PLPRuntimeLog.getString());
	}


	boolean devel = false;
	boolean grade = true;
	@Test
	public void subImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "subImage";
	String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromURLandWriteToFile2() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromURLandWriteToFile2";
	String input = progname + " url u, \nfile out \n{image i frame f \nu -> gray -> i;\n i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "images\\bj.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImagewrite(images\\bj.jpg)";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void sleepImg() throws Exception {
	//scan, parse, and type check the program
	String progname = "sleepImg";
	String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;sleep 5;integer j j <- 42;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)convolvecreateOrSetFrameshowImage42";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void addImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "addImage";
	String input = progname + " url u {image i image j image k frame f \nu -> i; \nu -> j; \n k <- i-j; k -> f -> show; sleep 5; k <- k + i; k -> f -> show; \n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImageaddcopyImagecreateOrSetFrameshowImageshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void convolveImg() throws Exception {
	//scan, parse, and type check the program
	String progname = "convolveImg";
	String input = progname + " url u {image i frame f \nu -> i -> convolve -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)convolvecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	}
	@Test
	public void readFromURLandDisplay() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromURLandDisplay";
	String input = progname + " url u {image i frame f \nu -> i;i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void imgMove2() throws Exception {
	//scan, parse, and type check the program
	String progname = "imgMove2";
	String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nx <- screenwidth;\ny <- screenheight; \nf -> move (x*3/4,y/4) -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagegetScreenWidth1600getScreenHeight900moveFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void subImage2() throws Exception {
	//scan, parse, and type check the program
	String progname = "subImage2";
	String input = progname + " url u {image i image j frame f \nu -> i; \nu -> j; \n i <- i-j; i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)subcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void modImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "modImage";
	String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j%128; i -> f -> show;sleep (1000);\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)modcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void allTheOps() throws Exception {
	//scan, parse, and type check the program
	String progname = "allTheOps";
	String input = progname + " file u {image i frame f \nu -> i -> gray -> convolve -> blur -> i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"images\\bj.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "readFromFile(images\\bj.jpg)grayOpconvolveblurOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromURLandDisplayDisplay2() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromURLandDisplayDisplay2";
	String input = progname + " url u {image i frame f \nu -> i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromURLandWriteToFile() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromURLandWriteToFile";
	String input = progname + " url u, \nfile out \n{image i frame f \nu -> i;i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "images\\bj.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagewrite(images\\bj.jpg)";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void blurImg() throws Exception {
	//scan, parse, and type check the program
	String progname = "blurImg";
	String input = progname + " url u {image i frame f \nu -> i -> blur -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)blurOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void grayImg() throws Exception {
	//scan, parse, and type check the program
	String progname = "grayImg";
	String input = progname + " url u {image i frame f \nu -> i -> gray -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void divImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "divImage";
	String input = progname + " url u {image i image j frame f \nu -> j; \n i <- j/2; i -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)divcopyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromURLandWriteScaledImageToFile() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromURLandWriteScaledImageToFile";
	String input = progname + " url u, \nfile out \n{image i frame f \nu -> scale (3) -> i;i -> f -> show; \n i -> out;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg", "images\\bj.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)scalecreateOrSetFrameshowImagewrite(images\\bj.jpg)";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromFile() throws Exception {
	//scan, parse, and type check the program
	String progname = "readFromFile";
	String input = progname + " file u {image i frame f \nu -> i;i -> f -> show; \n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"images\\bj_out.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "readFromFile(images\\bj_out.jpg)createOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void barArrowGray() throws Exception {
	//scan, parse, and type check the program
	String progname = "barArrowGray";
	String input = progname + " url u {image i frame f \nu -> i |-> gray -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)grayOpcreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void assignImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "assignImage";
	String input = progname + " url u {image i image j frame f \nu -> i; j <- i;j -> f -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)copyImagecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void scaleImage() throws Exception {
	//scan, parse, and type check the program
	String progname = "scaleImage";
	String input = progname + " url u {image i frame f \nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void imgMove() throws Exception {
	//scan, parse, and type check the program
	String progname = "imgMove";
	String input = progname + " url u {image i frame f \nu -> i;i -> f -> show; \nsleep 5; \ninteger x \ninteger y \nf -> xloc -> x; \nf -> yloc -> y; \nf -> move (x+100,y-100) -> show;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagegetXgetYmoveFrameshowImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void assignImageAndFrame() throws Exception {
	//scan, parse, and type check the program
	String progname = "assignImageAndFrame";
	String input = progname + " url u {image i image i1 frame f frame f1\nu -> i -> f -> show; frame f2 \ni -> scale (3) -> f2 -> show; \n i1 <- i; \n f2 <- f;\n}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[]{"http://i.imgur.com/O75rAPi.jpg"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "getURL(http://i.imgur.com/O75rAPi.jpg)readFromURL(http://i.imgur.com/O75rAPi.jpg)createOrSetFrameshowImagescalecreateOrSetFrameshowImagecopyImage";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void booleanComp1() throws Exception {
	//scan, parse, and type check the program
	String progname = "booleanComp1";
	String input = progname + " "
			+ " { boolean x  x<- true == false;boolean y  y<- true != false;boolean z  z<- true | false;z<- x|y;z<- x&y;} ";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[0]; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetruetruetruefalse";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void booleanBinaryExpression2() throws Exception {
	//scan, parse, and type check the program
	String progname = "booleanBinaryExpression2";
	String input = progname + " "
			+ "\nboolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
	Scanner scanner = new Scanner(input);
	scanner.scan();
	Parser parser = new Parser(scanner);
	ASTNode program = parser.parse();
	TypeCheckVisitor v = new TypeCheckVisitor();
	PLPRuntimeLog.initLog();
	program.visit(v, null);
	show(program);
	//generate code
	CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
	byte[] bytecode = (byte[]) program.visit(cv, null);
	//output the generated bytecode
	CodeGenUtils.dumpBytecode(bytecode);
	//write byte code to file
	String name = ((Program) program).getName();
	String classFileName = "bin/" + name + ".class";
	OutputStream output = new FileOutputStream(classFileName);
	output.write(bytecode);
	output.close();
	System.out.println("wrote classfile to " + classFileName);
	// directly execute bytecode
	String[] args = new String[] {"false","true"}; //create command line argument array to initialize params
	Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
	String expOut = "falsetrue";
	ByteArrayOutputStream outContent = new ByteArrayOutputStream();
	PrintStream oldStream = System.out;
	    System.setOut(new PrintStream(outContent));
	    instance.run();
	    assertEquals(expOut, PLPRuntimeLog.getString());
	    System.setOut(oldStream);
	instance.run();
	}
	@Test
	public void readFromURLandWriteToFile3() throws Exception {
		// scan, parse, and type check the program
		String progname = "readFromURLandWriteToFile3";
		String input = progname + "  url u, \nfile out \n{\nu -> gray  -> out;\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "http://i.imgur.com/nj0smCy.jpg",
				"images\\bj_out.jpg" };
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		String expOut = "getURL(http://i.imgur.com/nj0smCy.jpg)readFromURL(http://i.imgur.com/nj0smCy.jpg)grayOpwrite(images\\bj_out.jpg)";
		ByteArrayOutputStream outContent = new ByteArrayOutputStream();
		PrintStream oldStream = System.out;
		    System.setOut(new PrintStream(outContent));
		    instance.run();
		    assertEquals(expOut, PLPRuntimeLog.getString());
		    System.setOut(oldStream);
		instance.run();
	}
	@Test
	public void fibonacci() throws Exception {
		// scan, parse, and type check the program
		String progname = "fibonacci";
		String input = progname
				+ "  integer n {\n   integer result result<-0;\n   if(n == 0){\n    result<- 0;\n  }\n  if(n == 1){\n    result<- 1;\n  }\n  if(n > 1){\n    integer fib1 fib1<- 0;\n    integer fib2 fib2<- 1;\n    integer idx idx<- 2;\n    while(idx < n){      integer tmp tmp<- fib1 + fib2;\n      fib1<- fib2;\n      fib2<- tmp;\n      idx<- idx + 1;\n    }\n    result<- fib1+fib2;\n  }\n}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "10" };
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	@Test
	public void booleanBinaryExpression3() throws Exception {
		// scan, parse, and type check the program
		String progname = "booleanBinaryExpression3";
		String input = progname
				+ " boolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "true","false" };
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}
	@Test
	public void booleanBinaryExpression() throws Exception {
		// scan, parse, and type check the program
		String progname = "booleanBinaryExpression";
		String input = progname
				+ " boolean  b0, boolean b1{  \n boolean b3 boolean b4 b3 <- b0 & b1; b4 <- b0 | b1;}";
		Scanner scanner = new Scanner(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		ASTNode program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);
		// generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel, grade, null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		// output the generated bytecode
		CodeGenUtils.dumpBytecode(bytecode);
		// write byte code to file
		String name = ((Program) program).getName();
		String classFileName = "bin/" + name + ".class";
		OutputStream output = new FileOutputStream(classFileName);
		output.write(bytecode);
		output.close();
		System.out.println("wrote classfile to " + classFileName);
		// directly execute bytecode
		String[] args = new String[] { "true", "false" };
		Runnable instance = CodeGenUtils.getInstance(name, bytecode, args);
		instance.run();
	}

}
